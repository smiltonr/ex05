#+TITLE: Exercise 5: Arrays
#+AUTHOR: S Milton Rajendram

#+LaTeX_HEADER: \usepackage{palatino}
#+LaTeX_HEADER: \usepackage[top=1in, bottom=1.25in, left=1.25in, right=1.25in]{geometry}
#+LaTeX_HEADER: \usepackage{setspace}
#+OPTIONS: toc:nil

#+BEGIN_EXPORT latex
\linespread{1.2}
#+END_EXPORT
#+PROPERTY: header-args :exports both
* Array visitor
1. *Polynomial evaluation*: A polynomial $a_{n-1}x^{n-1} +
   a_{n-2}x^{n-2} + \ldots + a_{1}x + a_{0}$ is represented by an array
   =a[0:n]= of its coefficients. Write a program to compute the value
   of a polynomial using Horner's rule. The crux of the algorithm is:
   \hfill (/accumulator/)
   #+LATEX: \linespread{1}
   #+BEGIN_EXAMPLE
   s = 0
   for i = n-1 down to 0:
     s = s * x + a[i]
   #+END_EXAMPLE
   #+LATEX: \linespread{1.2}
   Compare the algorithm with the algorithm for summing the items of
   an array.
2. *Binary search*: We are given a sorted array of numbers. Define a
   function
   #+LATEX: \linespread{1}
   #+BEGIN_EXAMPLE
   binary_search(a, n, target)
   #+END_EXAMPLE
   #+LATEX: \linespread{1.2}
   that searches for =target= in =a[0:n]= using binary search
   algorithm. Let the function return an index =i= such that \hfill
   (/search/)
   #+BEGIN_EXAMPLE
   a[0:i] < target <= a[i:n]
   #+END_EXAMPLE

* Sorting

1. *Selection sort*: Selection sort is an algorithm for sorting an
   array of items, say =a[0:n]=. The idea of the algorithm is
   expressed below:
   #+LATEX:  \linespread{1}
   #+NAME: selsort

   #+BEGIN_EXAMPLE
   swap a[0], a[minimum(a,0,n)]
   swap a[1], a[minimum(a,1,n)]
   swap a[2], a[minimum(a,2,n)]
   ...
   swap a[n-2], a[minimum(a,n-2,n)]   
   #+END_EXAMPLE
   which uses =minimum(a, i, n)= to find the minimum of a subarray
   =a[i:n]=.
   #+BEGIN_EXAMPLE
   selection_sort (a, 0, n):
      for i = 0 to n-2:
         swap a[i], a[minimum(a, i, n)]   
   #+END_EXAMPLE
   #+latex: \linespread{1.2}
   Implement selection sort, using =minimum()= function. Note:
   remember that when a function changes the items of an array
   parameter, the changes are effected in the items of the actual
   array argument also.

   Test the function from =main()= for several lists of numbers. Each
   test should read a list of numbers from stdin.
2. *Polish National Flag (PNF)*: In an array of items =a[low:high]=,
   each item is either positive or negative. Define a function
   =partition(a, low, high)= that partitions the array into two
   subarrays =a[low:i]= and =a[i:high]= such that all the negative
   items of the array form =[low:i]=, and all the positive items form
   =[i:high]=. Test the function from =main()=. Use several lists of
   numbers for testing. (Note: We will use this algorithm for
   implementing =quicksort()=.)

   *Specification*: The partition algorithm takes an array
   =a[low:high]= as the input and returns an index =i= as
   the output such that all the negative items of the array
   form =[low:i]=, and all the positive items form
   =[i:high]=.

   *Algorithm development*\\
   The iterative step:\\
   After a few iterations, there are 3 subarrays, =[low:i]=,
   =[i:j]=, and =[j:n]=.

   Initially, ...\\

   The next item to be scanned is =[j]=.  There are two
   cases: =[j] < 0= and =0 <= [j]=.

   *Algorithm*
   #+BEGIN_EXAMPLE
   partition a, low, high:
      i, j = low, high
      while j != high:
         if a[j] < 0:
            swap a[i], a[j]
            i = i+1
         j = j + 1
   #+END_EXAMPLE
   
   #+LATEX: \linespread{1}
   #+BEGIN_SRC C :cmdline <dnf.in
#include <stdio.h>

int read_array (int a[]);
void print_array (int a[], int low, int high);
int partition (int a[], int n);
void swap (int a[], int i, int j);

int main ()
{
  int a[100];
  int n;
  int i;
  
  n = read_array(a);
  print_array (a, 0, n);
  i = partition (a, n);
  print_array (a, 0, i);
  print_array (a, i, n);  
}

int read_array (int a[])
{
  int i;
  for (i = 0; scanf ("%d", &a[i]) == 1; i++)
    ;
  return i;
}

void print_array (int a[], int low, int high)
{
  int i;
  
  for (i = low; i < high; i++)
    printf ("%d,", a[i]);
  printf ("\n");
}

int partition (int a[], int n)
{
  int i, j;

  i = 0;
  j = 0;
  while (j != n) {
    if (a[j] < 0) {
      swap (a, i, j);
      i++;
    }
    j++;
  }
  return i;
}

void swap (int a[], int i, int j)
{
  int t = a[i];
  a[i] = a[j];
  a[j] = t;
}
   #+END_SRC

   #+RESULTS:
   |  20 |  30 | -80 | -30 |   0 | 10 | -40 | -90 | 0 | 50 | 60 | -50 |   |
   | -80 | -30 | -40 | -90 | -50 |    |     |     |   |    |    |     |   |
   |  10 |  20 |  30 |   0 |  50 | 60 |   0 |     |   |    |    |     |   |

3. *Dutch National Flag (DNF)* is similar to PNF, but partitions the
   array =a[l:h]= into three subarrays =[l:i]=, =[i:j]= and
   =[j:h]=. Each item of the array has one of the three
   properties. Items having the same property should form one subarray
   each.

